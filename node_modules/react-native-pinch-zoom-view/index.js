import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Animated, View, StyleSheet, Dimensions, PanResponder, ViewPropTypes } from 'react-native';

// Fallback when RN version is < 0.44
const viewPropTypes = ViewPropTypes || View.propTypes;

export default class PinchZoomView extends Component {
  static propTypes = {
    ...viewPropTypes,
    scalable: PropTypes.bool,
    minScale: PropTypes.number,
    maxScale: PropTypes.number
  };

  static defaultProps = {
    scalable: true,
    minScale: 0.5,
    maxScale: 2
  };

  constructor(props) {
    super(props);
    this.state = {
      scale: 1,
      lastScale: 1,
      offsetX: -100,
      offsetY: -100,
      lastX: 0,
      lastY: 0,
      lastMovePinch: false,
      width: 0,
      height: 0
    };
    this.distant = 150;
  }

  componentWillMount() {
    this.gestureHandlers = PanResponder.create({
      onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,
      onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,
      onPanResponderGrant: this._handlePanResponderGrant,
      onPanResponderMove: this._handlePanResponderMove,
      onPanResponderRelease: this._handlePanResponderEnd,
      onPanResponderTerminationRequest: evt => true,
      onShouldBlockNativeResponder: evt => false
    });
  }

  _handleStartShouldSetPanResponder = (e, gestureState) => {
    // don't respond to single touch to avoid shielding click on child components
    return false;
  };

  _handleMoveShouldSetPanResponder = (e, gestureState) => {
    return (
      this.props.scalable &&
      (Math.abs(gestureState.dx) > 2 ||
        Math.abs(gestureState.dy) > 2 ||
        gestureState.numberActiveTouches === 2)
    );
  };

  _handlePanResponderGrant = (e, gestureState) => {
    if (gestureState.numberActiveTouches === 2) {
      let dx = Math.abs(
        e.nativeEvent.touches[0].pageX - e.nativeEvent.touches[1].pageX
      );
      let dy = Math.abs(
        e.nativeEvent.touches[0].pageY - e.nativeEvent.touches[1].pageY
      );
      let distant = Math.sqrt(dx * dx + dy * dy);
      this.distant = distant;
    }
  };

  _handlePanResponderEnd = (e, gestureState) => {
    var window_width = Dimensions.get("window").width;
    var window_height = Dimensions.get("window").height;
    var total_width = this.state.width / this.state.scale;
    var total_height = this.state.height / this.state.scale;
    var real_width = this.state.width * this.state.scale;
    var real_height = this.state.height * this.state.scale;
    var ratelimXmin = -1 * (total_width - this.state.width) / 2;
    var ratelimYmin = -1 * (total_height - this.state.height) / 2;
    var offsetX = this.state.offsetX;
    var offsetY = this.state.offsetY;
    var ratelimXmax = -1 * ((total_width - this.state.width) / 2 + this.state.width - window_width / this.state.scale);
    var ratelimYmax = -1 * ((total_height - this.state.height) / 2 + this.state.height - window_height / this.state.scale);
    if (this.props.toupdate) {
      offsetX = 0;
      offsetY = 0;
      // this.props.toupdate = false;

    }
    if (offsetX > ratelimXmin || window_width >= real_width) {
      offsetX = ratelimXmin;
    }
    else if (offsetX < ratelimXmax && window_width < real_width) {
      offsetX = ratelimXmax;
    }
    if (offsetY > ratelimYmin || window_height >= real_height) {
      offsetY = ratelimYmin;
    }
    else if (offsetY < ratelimYmax && window_height < real_height) {
      offsetY = ratelimYmax;
    }
    this.setState({
      offsetX,
      offsetY,
      lastX: offsetX,
      lastY: offsetY,
      lastScale: this.state.scale,
      lastMovePinch: false
    });
  };
  _handlePanResponderMove = (e, gestureState) => {
    if (this.props.toupdate) {


      this.props.setToUpdate(false);
      let offsetX_local = 0;
      let local_scale = 1;
      this.setState({ offsetX_local, offsetX_local, local_scale, lastMovePinch: false });
      // zoom
    }

    if (gestureState.numberActiveTouches === 2) {
      let dx = Math.abs(
        e.nativeEvent.touches[0].pageX - e.nativeEvent.touches[1].pageX
      );
      let dy = Math.abs(
        e.nativeEvent.touches[0].pageY - e.nativeEvent.touches[1].pageY
      );
      let distant = Math.sqrt(dx * dx + dy * dy);
      let scale = (distant / this.distant) * this.state.lastScale;
      //check scale min to max
      // let offsetX = this.state.lastX + Math.min(e.nativeEvent.touches[0].pageX,e.nativeEvent.touches[1].pageX);
      // let offsetY = this.state.lastY + Math.min(e.nativeEvent.touches[0].pageY, e.nativeEvent.touches[1].pageY);

      if (scale < this.props.maxScale && scale > this.props.minScale) {
        var window_width = Dimensions.get("window").width;
        var window_height = Dimensions.get("window").height;
        var total_width = this.state.width / Math.min(scale, this.state.lastScale);
        var total_height = this.state.height / Math.min(scale, this.state.lastScale);
        var real_width = this.state.width * scale;
        var real_height = this.state.height * scale;
        var ratelimXmin = -1 * (total_width - this.state.width) / 2;
        var ratelimYmin = -1 * (total_height - this.state.height) / 2;
        var ratelimXmax = -1 * ((total_width - this.state.width) / 2 + this.state.width - window_width / scale);
        var ratelimYmax = -1 * ((total_height - this.state.height) / 2 + this.state.height - window_height / scale);

        let offsetX = this.state.lastX - (this.state.lastScale - scale) * (total_width) / 2;
        let offsetY = this.state.lastY - (this.state.lastScale - scale) * (total_height) / 2;
        // if (offsetX > ratelimXmin || window_width >= real_width) {
        //   offsetX = ratelimXmin;
        // }
        // else if (offsetX < ratelimXmax && window_width < real_width) {

        //   offsetX = ratelimXmax;
        // }
        // if (offsetY > ratelimYmin || window_height >= real_height) {
        //   offsetY = ratelimYmin;
        // }
        // else if (offsetY < ratelimYmax && window_height < real_height) {
        //   offsetY = ratelimYmax;
        // }
        this.setState({ offsetX, offsetY, scale, lastMovePinch: true });
        // }
      }
    }
    // translate
    else if (gestureState.numberActiveTouches === 1) {
      if (this.state.lastMovePinch) {
        gestureState.dx = 0;
        gestureState.dy = 0;
      }
      let offsetX = this.state.lastX + (gestureState.dx * 1.5) / this.state.scale;
      let offsetY = this.state.lastY + (gestureState.dy * 1.5) / this.state.scale;
      // if ( offsetX < 0  || offsetY <  0 )
      var window_width = Dimensions.get("window").width;
      var window_height = Dimensions.get("window").height;
      var total_width = this.state.width / this.state.scale;
      var total_height = this.state.height / this.state.scale;
      var real_width = this.state.width * this.state.scale;
      var real_height = this.state.height * this.state.scale;
      var ratelimXmin = -1 * (total_width - this.state.width) / 2;
      var ratelimYmin = -1 * (total_height - this.state.height) / 2;
      var ratelimXmax = -1 * ((total_width - this.state.width) / 2 + this.state.width - window_width / this.state.scale);
      var ratelimYmax = -1 * ((total_height - this.state.height) / 2 + this.state.height - window_height / this.state.scale);
      if (!this.state.lastMovePinch) {


        if (offsetX > ratelimXmin || window_width >= real_width) {
          offsetX = ratelimXmin;
        }
        else if (offsetX < ratelimXmax && window_width < real_width) {
          offsetX = ratelimXmax;
        }
        if (offsetY > ratelimYmin || window_height >= real_height) {
          offsetY = ratelimYmin;
        }
        else if ((offsetY < ratelimYmax) && window_height < real_height) {
          offsetY = ratelimYmax;
        }
      }
      this.setState({ offsetX, offsetY, lastMovePinch: false });

    }
  };

  render() {
    return (
      <View onLayout={(event) => {
        var { x, y, width, height } = event.nativeEvent.layout; this.state.width = width; this.state.height = height;
      }}
        {...this.gestureHandlers.panHandlers}
        style={[
          styles.container,
          this.props.style,
          this.props.toupdate ? {
            transform: [
              { scaleX: 1 },
              { scaleY: 1 },
              { translateX: 0 },
              { translateY: 0 }
            ]
          } :
            {
              transform: [
                { scaleX: this.state.scale },
                { scaleY: this.state.scale },
                { translateX: this.state.offsetX },
                { translateY: this.state.offsetY }
              ]
            }
        ]}
      >
        {this.props.children}
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1
  }
});
